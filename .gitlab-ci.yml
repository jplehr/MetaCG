# File: .gitlab-ci.yml
# License: Part of the MetaCG proect. Licensed under BSD 3 clause license. See LICENSE.txt file at https://github.com/jplehr/pira/LICENSE.txt
# Description: File to configure our Gitlab CI

# Stages
stages:
  - download
  - lint
  - build-deps
  - build
  - test
  - integration-test
  - install
  - deploy

.lb-setup: &lb-setup
  - module load gcc/8.3
  - module load git llvm/10.0.0 cmake python/3.7.4
  - module load libcube/4.5

mcg-download:
  stage: download
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - echo 'Done.'

mcg-cmake-lint:
  stage: lint
  tags:
    - metacg
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - for f in $(find . -name "CMakeLists.txt"); do cmake-format --check $f || exit 1; done
    - for f in $(find ./cmake -type f); do cmake-format --check $f || exit 1; done

build-dependencies:
  stage: build-deps
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - ./build_submodules.sh

mcg-container:
  stage: build-deps
  tags:
    - podman
  variables:
    GIT_STRATEGY: clone
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - podman login ${CI_REGISTRY} -u ${CI_CONTAINER_REG_USER} -p ${CONTAINER_REGISTRY_READ_TOKEN}
    - podman build -t registry.git.rwth-aachen.de/tuda-sc/projects/metacg/metacg:$CI_COMMIT_SHA -f container/metacg .
    - podman run --rm -t metacg:$CI_COMMIT_SHA /opt/metacg/metacg/build/pgis/test/unit/basictests
    - podman image rm metacg:$CI_COMMIT_SHA

build-mcg:
  stage: build
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/tmp/metacg -DCUBE_LIB=$(dirname $(which cube_info))/../lib -DCUBE_INCLUDE=$(dirname $(which cube_info))/../include/cubelib -DEXTRAP_INCLUDE=./extern/src/extrap/extrap-3.0/include -DEXTRAP_LIB=./extern/install/extrap/lib -DSPDLOG_BUILD_SHARED=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
    - cmake --build build --parallel

test-cgc:
  stage: test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd cgcollector/test
    - mkdir log
    - bash run_format_one_test.sh
    - bash run_format_two_test.sh

test-cgvalidate:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd cgcollector/test/integration
    - ./runner.sh

install-mcg:
  stage: install
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cmake --install build
    - stat /tmp/metacg/bin/cgcollector
    - stat /tmp/metacg/bin/cgmerge
    - export LD_LIBRARY_PATH=/tmp/metacg/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/bin/cgcollector --help
    - rm -r /tmp/metacg


test-pgis:
  stage: test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd build/pgis/test/unit && ./basictests

test-static-pgis:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh static

test-basic-pgis:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./basicTestRunner.sh

test-modeling-pgis:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh modeling

test-dynamic-pgis:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh dynamic
    
test-imbalance-pgis:
  stage: integration-test
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - cd pgis
    - export LD_LIBRARY_PATH=$PWD/../extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cd test/integration
    - ./selectionTestRunner.sh imbalance

install-pgis:
  stage: install
  tags:
    - general
  before_script: *lb-setup
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_COMMIT_SHA
  script:
    - export LD_LIBRARY_PATH=$PWD/extern/install/extrap/lib:$LD_LIBRARY_PATH
    - cmake --install build
    - stat /tmp/metacg/bin/pgis_pira
    - export LD_LIBRARY_PATH=/tmp/metacg/lib:$LD_LIBRARY_PATH
    - /tmp/metacg/bin/pgis_pira --help
    - rm -r /tmp/metacg

